@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Model
@page "/canva"
@rendermode InteractiveWebAssembly

<PageTitle>Kotleciak's Canva</PageTitle>
<h1 style="display:block; position:absolute; top: 5%; text-align:center; left: 50%; font-family: 'Roboto';font-style: italic; transform: translateX(-50%);">Kotleciak's Canva</h1>
<div id="canvaContainer">
    <div @onmousedown="StartDrawing"
    @onmouseup="StopDrawing"
    @onmousemove="Draw"
    id="CanvaDiv"
    @ref="containerRef">
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference2">
        </BECanvas>
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference">
        </BECanvas>
    </div>
</div>
<div class="toolDiv" id="BrushDiv">
    <!--Brush thickness-->
    <input type="radio" id="thick1" name="thicBtn" class="ThickBtn" checked/>
    <label class="thicknessChanger" @onclick='() => ChangeThickness(1)' for="thick1"><div class="thicknessChangerDiv" id="tC-1"></div></label>
    <input type="radio" id="thick2" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(2)' for="thick2"><div class="thicknessChangerDiv" id="tC-2"></div></label>
    <input type="radio" id="thick3" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(3)' for="thick3"><div class="thicknessChangerDiv" id="tC-3"></div></label>
    <input type="radio" id="thick4" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(4)' for="thick4"><div class="thicknessChangerDiv" id="tC-4"></div></label>
    <input type="radio" id="thick5" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(5)' for="thick5"><div class="thicknessChangerDiv" id="tC-5"></div></label>
    <input type="radio" id="thick6" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(6)' for="thick6"><div class="thicknessChangerDiv" id="tC-6"></div></label>
    <input type="radio" id="thick7" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(7)' for="thick7"><div class="thicknessChangerDiv" id="tC-7"></div></label>
    <input type="radio" id="thick8" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(8)' for="thick8"><div class="thicknessChangerDiv" id="tC-8"></div></label>
    <input type="radio" id="thick9" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(9)' for="thick9"><div class="thicknessChangerDiv" id="tC-9"></div></label>
    <input type="radio" id="thick10" name="thicBtn" class="ThickBtn" />
    <label class="thicknessChanger" @onclick='() => ChangeThickness(10)' for="thick10"><div class="thicknessChangerDiv" id="tC-10"></div></label>
</div>
<div class="toolDiv" id="ColorDiv">
    <!--Brush color-->
    <input type="radio" style="background-color: #ff0000" class="colorSample" @onchange='() => ChangeColor("#ff0000")' name="colorBtn" id="color1"/>
    <label for="color1" class="colorLabel" style="background-color:#ff0000;"></label>
    <input type="radio" style="background-color: #ff6a00" class="colorSample" @onchange='() => ChangeColor("#ff6a00")' name="colorBtn" id="color2" />
    <label for="color2" class="colorLabel" style="background-color:#ff6a00;"></label>
    <input type="radio" style="background-color: #ffd900" class="colorSample" @onchange='() => ChangeColor("#ffd900")' name="colorBtn" id="color3" />
    <label for="color3" class="colorLabel" style="background-color:#ffd900;"></label>
    <input type="radio" style="background-color: #b3ff00" class="colorSample" @onchange='() => ChangeColor("#b3ff00")' name="colorBtn" id="color4" />
    <label for="color4" class="colorLabel" style="background-color:#b3ff00;"></label>
    <input type="radio" style="background-color: #2c7d00" class="colorSample" @onchange='() => ChangeColor("#2c7d00")' name="colorBtn" id="color5" />
    <label for="color5" class="colorLabel" style="background-color:#2c7d00;"></label>
    <input type="radio" style="background-color: #00ffc8" class="colorSample" @onchange='() => ChangeColor("#00ffc8")' name="colorBtn" id="color6" />
    <label for="color6" class="colorLabel" style="background-color:#00ffc8;"></label>
    <input type="radio" style="background-color: #00d5ff" class="colorSample" @onchange='() => ChangeColor("#00d5ff")' name="colorBtn" id="color7" />
    <label for="color7" class="colorLabel" style="background-color:#00d5ff;"></label>
    <input type="radio" style="background-color: #001c82" class="colorSample" @onchange='() => ChangeColor("#001c82")' name="colorBtn" id="color8" />
    <label for="color8" class="colorLabel" style="background-color:#001c82;"></label>
    <input type="radio" style="background-color: #6f08ff" class="colorSample" @onchange='() => ChangeColor("#6f08ff")' name="colorBtn" id="color9" />
    <label for="color9" class="colorLabel" style="background-color:#6f08ff;"></label>
    <input type="radio" style="background-color: #ff08ea" class="colorSample" @onchange='() => ChangeColor("#ff08ea")' name="colorBtn" id="color10" />
    <label for="color10" class="colorLabel" style="background-color:#ff08ea;"></label>
    <input type="radio" style="background-color: #360c01" class="colorSample" @onchange='() => ChangeColor("#360c01")' name="colorBtn" id="color11" />
    <label for="color11" class="colorLabel" style="background-color:#360c01;"></label>
    <input type="radio" style="background-color: #612414" class="colorSample" @onchange='() => ChangeColor("#612414")' name="colorBtn" id="color12" />
    <label for="color12" class="colorLabel" style="background-color:#612414;"></label>
    <input type="radio" style="background-color: #4f4f4f" class="colorSample" @onchange='() => ChangeColor("#4f4f4f")' name="colorBtn" id="color13" />
    <label for="color13" class="colorLabel" style="background-color:#4f4f4f;"></label>
    <input type="radio" style="background-color: #000000" class="colorSample" @onchange='() => ChangeColor("#000000")' name="colorBtn" id="color14" checked/>
    <label for="color14" class="colorLabel" style="background-color:#000000;"></label>
</div>
<div id="extraToolsDiv">
    <input type="radio" checked @onchange="() => ChangePencilMode()" name="1" class="toolSelectorBtn" id="tool1"/>
    <label for="tool1" class="toolSelectLabel" title="Pecil">✏️</label>
    <input type="radio" @onchange='(e) => EraseModeChanged(e)' name="1" class="toolSelectorBtn" id="tool2" />
    <label for="tool2" class="toolSelectLabel" title="Rubber">👝</label>
    <input type="radio" @onchange="() => DrawingRectangle()" name="1" class="toolSelectorBtn" id="tool3" />
    <label for="tool3" class="toolSelectLabel" title="Rectangle">▯</label>
    <input type="radio" @onchange="() => DrawingStraightLine()" name="1" class="toolSelectorBtn" id="tool4" />
    <label for="tool4" class="toolSelectLabel" title="Straight line">│</label>
    <button @onclick='ClearCanvas' id="clearButton" title="Clear canva">🗑</button>
    <button @onclick="SaveCanvasAsPng" id="saveButton" title="Download image">⬇️</button>
</div>
<script>
    let id = 0;
    window.getElementWidth = (element) => {
		return element.offsetWidth;
    };
    window.getElementHeight = (element) => {
    return element.offsetHeight;
    };
    window.downloadCanvasByRef = (canvas, filename) => {
    var dataUrl = canvas.toDataURL("image/png");
    var link = document.createElement('a');
    link.href = dataUrl;
    link.download = filename || "Cool Drawing.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    };
    window.StartDrawingRectangle = () => {
    let upperCanva = document.getElementById("1")
    upperCanva.style.zIndex = "-1"
    }
    window.StopDrawingRectangle = () => {
    let upperCanva = document.getElementById("1")
    upperCanva.style.zIndex = "2"
    }
    window.setCanvasLayers = () => {
    document.body.style.overflow = "hidden";
    const canvases = document.querySelectorAll('#CanvaDiv canvas');
    canvases.forEach((c, idx) => {
    c.style.position = "absolute";
    c.style.left = "0";
    c.style.top = "0";
    c.style.zIndex = idx + 1;
    c.id = idx
    c.classList.add("canvas-layer-" + (idx + 1));
    });
    };
</script>


@code {
    private Canvas2DContext _context;
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _context2;
    private BECanvasComponent _canvasReference2;

    private double _lastX, _lastY;
    private int _canvasWidth = 100;
    private int _canvasHeight = 400;
    private ElementReference containerRef;
    private int BrushThickness = 1; // Default thickness
    private string BrushColor = "#000000";
    private bool _drawingRectangle = false;
    private bool _isDrawing = false;
    private bool _pencilMode = true;
    private bool _straightLineMode = false;
    private bool _eraseMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setCanvasLayers");

            _canvasWidth = await JS.InvokeAsync<int>("getElementWidth", containerRef);
            _canvasHeight = await JS.InvokeAsync<int>("getElementHeight", containerRef);//I know how it works
            StateHasChanged();//but not this one how it works, but it works and github copilot was right
            _context = await this._canvasReference.CreateCanvas2DAsync();
            _context2 = await this._canvasReference2.CreateCanvas2DAsync();

            await _context.SetFillStyleAsync("#ffffff");
            await _context.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);
            await _context.SetStrokeStyleAsync(BrushColor);

            await _context2.SetStrokeStyleAsync(BrushColor);
        }
    }
    private async Task ChangePencilMode()
    {
        _pencilMode = !_pencilMode;
        if(_drawingRectangle) { _drawingRectangle = false; }
        if (_straightLineMode) { _straightLineMode = false; }
        if (_eraseMode) { _eraseMode = false; }
        if(_pencilMode)
        {
			await _context.SetStrokeStyleAsync(BrushColor);
        }
    }


    private async Task StartDrawing(MouseEventArgs e)
    {
        _isDrawing = true;
        _lastX = e.OffsetX;
        _lastY = e.OffsetY;
    }

    private async Task StopDrawing(MouseEventArgs e)
    {
        _isDrawing = false;
        if (_drawingRectangle && !_straightLineMode)
        {
            await _context2.ClearRectAsync(0, 0, (double)_canvasWidth, (double)_canvasHeight);
            await _context.SetFillStyleAsync(BrushColor);
            await _context.FillRectAsync(_lastX, _lastY, e.OffsetX - _lastX, e.OffsetY - _lastY);
        }
		if (_straightLineMode)
		{
            await _context2.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);

            await _context.SetLineWidthAsync((float)BrushThickness);
            await _context.SetStrokeStyleAsync(BrushColor);
            await _context.BeginPathAsync();
            await _context.MoveToAsync(_lastX, _lastY);
            await _context.LineToAsync(e.OffsetX, e.OffsetY);
            await _context.StrokeAsync();
            await _context.ClosePathAsync();
		}
    }

    private async Task Draw(MouseEventArgs e)
    {

        if (_isDrawing && !_drawingRectangle && !_straightLineMode)
        {
            await _context.SetLineWidthAsync((float)BrushThickness);
            await _context.SetLineCapAsync(LineCap.Round);
            await _context.BeginPathAsync();
            await _context.MoveToAsync(_lastX, _lastY);
            await _context.LineToAsync(e.OffsetX, e.OffsetY);
            await _context.StrokeAsync();
            await _context.ClosePathAsync();

            _lastX = e.OffsetX;
            _lastY = e.OffsetY;
        }
        else if (_isDrawing && _drawingRectangle && !_straightLineMode)
        {

            await _context2.SetLineWidthAsync((float)BrushThickness);
            await _context2.SetLineCapAsync(LineCap.Round);
            await _context2.BeginPathAsync();
            double x = _lastX;
            double y = _lastY;
            double width = e.OffsetX - _lastX;
            double height = e.OffsetY - _lastY;

            await _context2.BeginPathAsync();
            await _context2.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);
            await _context2.SetFillStyleAsync(BrushColor);
            await _context2.FillRectAsync(x, y, width, height);
            await _context2.ClosePathAsync();
        }
        else if (_isDrawing && _straightLineMode)
        {
            await _context2.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);
            await _context2.SetLineWidthAsync((float)BrushThickness);
            await _context2.SetStrokeStyleAsync(BrushColor);
            await _context2.BeginPathAsync();
            await _context2.MoveToAsync(_lastX, _lastY);
            await _context2.LineToAsync(e.OffsetX, e.OffsetY);
            await _context2.StrokeAsync();
            await _context2.ClosePathAsync();
        }
    }
    private async Task ChangeColor(string color)
    {
        BrushColor = color;
        await _context.SetStrokeStyleAsync(color);
    }
    private async Task ChangeColorPicker(ChangeEventArgs e)
    {
        var color = e.Value.ToString();
        BrushColor = color;
        await _context.SetStrokeStyleAsync(color);
    }
    private async Task ChangeThickness(int thickness)
    {
        BrushThickness = thickness;
        //Okey I am an idiot, I set onclick event to div instead of button
    }
    private async Task EraseModeChanged(ChangeEventArgs e)
    {
		_eraseMode = !_eraseMode;
        if (_drawingRectangle) { _drawingRectangle = false; }
        if (_straightLineMode) { _straightLineMode = false; }
		if (_pencilMode) { _pencilMode = false; }
        if(_eraseMode)
        {
            await _context.SetStrokeStyleAsync("#ffffff");
        }
        else
        {
            await _context.SetStrokeStyleAsync(BrushColor);
        }
		_eraseMode = !_eraseMode;
    }
    private async Task ClearCanvas()
    {
        await _context.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);
        await _context.SetFillStyleAsync("#ffffff");
        await _context.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);
        await _context.SetStrokeStyleAsync(BrushColor);
    }
    public async Task SaveCanvasAsPng()
    {
        await JS.InvokeVoidAsync("downloadCanvasByRef", _canvasReference.CanvasReference, "Cool Drawing.png");
    }
    public async Task DrawingRectangle()
    {
        if (!_drawingRectangle)
        {
            _drawingRectangle = true;
			if (_straightLineMode) { _straightLineMode = false; }
			if (_eraseMode) { _eraseMode = false; }
			if (_pencilMode) { _pencilMode = false; }
            await JS.InvokeVoidAsync("StartDrawingRectangle");
        }
        else
        {
            _drawingRectangle = false;
            await JS.InvokeVoidAsync("StopDrawingRectangle");
        }
    }
    public async Task DrawingStraightLine()
    {
        if (!_straightLineMode)
        {
            _straightLineMode = true;
            if (_drawingRectangle) { _drawingRectangle = false; }
			if (_eraseMode) { _eraseMode = false; }
            if (_pencilMode) { _pencilMode = false; }
            await JS.InvokeVoidAsync("StartDrawingRectangle");
        }
        else
        {
            _straightLineMode = false;
            await JS.InvokeVoidAsync("StopDrawingRectangle");
        }
    }
}
