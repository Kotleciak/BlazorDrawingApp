@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Model
@page "/canva"
@rendermode InteractiveWebAssembly

<PageTitle>Kotleciak's Canva</PageTitle>

<div id="canvaContainer">
    <div @onmousedown="StartDrawing"
    @onmouseup="StopDrawing"
    @onmousemove="Draw"
    id="CanvaDiv"
    @ref="containerRef">
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference2">
        </BECanvas>
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference">
        </BECanvas>
    </div>
</div>
<div class="toolDiv" id="BrushDiv">
    <!--Brush thickness-->
    <button class="thicknessChanger" @onclick='() => ChangeThickness(1)'><div class="thicknessChangerDiv" id="tC-1"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(2)'><div class="thicknessChangerDiv" id="tC-2"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(3)'><div class="thicknessChangerDiv" id="tC-3"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(4)'><div class="thicknessChangerDiv" id="tC-4"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(5)'><div class="thicknessChangerDiv" id="tC-5"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(6)'><div class="thicknessChangerDiv" id="tC-6"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(7)'><div class="thicknessChangerDiv" id="tC-7"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(8)'><div class="thicknessChangerDiv" id="tC-8"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(9)'><div class="thicknessChangerDiv" id="tC-9"></div></button>
    <button class="thicknessChanger" @onclick='() => ChangeThickness(10)'><div class="thicknessChangerDiv" id="tC-10"></div></button>
</div>
<div class="toolDiv" id="ColorDiv">
    <!--Brush color-->
    <button style="background-color: #ff0000" class="colorSample" @onclick='() => ChangeColor("#ff0000")'></button>
    <button style="background-color: #ff6a00" class="colorSample" @onclick='() => ChangeColor("#ff6a00")'></button>
    <button style="background-color: #ffd900" class="colorSample" @onclick='() => ChangeColor("#ffd900")'></button>
    <button style="background-color: #b3ff00" class="colorSample" @onclick='() => ChangeColor("#b3ff00")'></button>
    <button style="background-color: #2c7d00" class="colorSample" @onclick='() => ChangeColor("#2c7d00")'></button>
    <button style="background-color: #00ffc8" class="colorSample" @onclick='() => ChangeColor("#00ffc8")'></button>
    <button style="background-color: #00d5ff" class="colorSample" @onclick='() => ChangeColor("#00d5ff")'></button>
    <button style="background-color: #001c82" class="colorSample" @onclick='() => ChangeColor("#001c82")'></button>
    <button style="background-color: #6f08ff" class="colorSample" @onclick='() => ChangeColor("#6f08ff")'></button>
    <button style="background-color: #ff08ea" class="colorSample" @onclick='() => ChangeColor("#ff08ea")'></button>
    <button style="background-color: #360c01" class="colorSample" @onclick='() => ChangeColor("#360c01")'></button>
    <button style="background-color: #612414" class="colorSample" @onclick='() => ChangeColor("#612414")'></button>
    <button style="background-color: #000000" class="colorSample" @onclick='() => ChangeColor("#000000")'></button>
</div>
<div id="extraToolsDiv">
    <input type="checkbox" @onchange='(e) => EraseModeChanged(e)' id="EraseCheckbox" name="a" /><label for="EraseCheckbox" id="EraseLabel">erase</label>
    <button @onclick='ClearCanvas' id="clearButton">clear</button>
    <button @onclick="SaveCanvasAsPng" id="saveButton">save</button>
    <div id="ColorPickerDiv"><input type="color" @onchange='(e) => ChangeColorPicker(e)' /></div>
    <button id="DrawRectangleButton" @onclick="() => DrawingRectangle()">Rectangle</button>
</div>
<script>
    let id = 0;
    window.getElementWidth = (element) => {
    return element.offsetWidth;
    };
    window.getElementHeight = (element) => {
    return element.offsetHeight;
    };
    window.downloadCanvasByRef = (canvas, filename) => {
    var dataUrl = canvas.toDataURL("image/png");
    var link = document.createElement('a');
    link.href = dataUrl;
    link.download = filename || "mydrawing.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    };
    window.StartDrawingRectangle = () => {
        let upperCanva = document.getElementById("1")
        upperCanva.style.zIndex = "-1"
    }
    window.StopDrawingRectangle = () => {
        let upperCanva = document.getElementById("1")
        upperCanva.style.zIndex = "2"
    }
    window.setCanvasLayers = () => {
    // Pobierz wszystkie canvasy w kontenerze
    const canvases = document.querySelectorAll('#CanvaDiv canvas');
    canvases.forEach((c, idx) => {
    c.style.position = "absolute";
    c.style.left = "0";
    c.style.top = "0";
    c.style.zIndex = idx + 1;
    c.id = idx
    c.classList.add("canvas-layer-" + (idx + 1));
    });
    };
</script>


@code {
    private Canvas2DContext _context;
    private BECanvasComponent _canvasReference;
    private Canvas2DContext _context2;
    private BECanvasComponent _canvasReference2;

    private double _lastX, _lastY;
    private bool _isDrawing = false;
    private int _canvasWidth = 100;
    private int _canvasHeight = 400;
    private ElementReference containerRef;
    private int BrushThickness = 1; // Default thickness
    private string BrushColor = "#000000";
    private bool _drawingRectangle = false;
	
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setCanvasLayers");

            _canvasWidth = await JS.InvokeAsync<int>("getElementWidth", containerRef);
            _canvasHeight = await JS.InvokeAsync<int>("getElementHeight", containerRef);//I know how it works
            StateHasChanged();//but not this one how it works, but it works and github copilot was right
            _context = await this._canvasReference.CreateCanvas2DAsync();
            _context2 = await this._canvasReference2.CreateCanvas2DAsync();

            await _context.SetFillStyleAsync("#ffffff");
            await _context.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);
            await _context.SetStrokeStyleAsync(BrushColor);

            await _context2.SetStrokeStyleAsync(BrushColor);
        }
    }


    private async Task StartDrawing(MouseEventArgs e)
    {
        _isDrawing = true;
        _lastX = e.OffsetX;
        _lastY = e.OffsetY;
    }

    private async Task StopDrawing(MouseEventArgs e)
    {
        _isDrawing = false;
        if (_drawingRectangle)
        {
            await _context2.ClearRectAsync(0, 0, (double)_canvasWidth, (double)_canvasHeight);
            await _context.SetFillStyleAsync(BrushColor);
            await _context.FillRectAsync(_lastX, _lastY, e.OffsetX - _lastX, e.OffsetY - _lastY);
        }
    }

    private async Task Draw(MouseEventArgs e)
    {

        if (_isDrawing && !_drawingRectangle)
        {
            await _context.SetLineWidthAsync((float)BrushThickness);
            await _context.SetLineCapAsync(LineCap.Round);
            await _context.BeginPathAsync();
            await _context.MoveToAsync(_lastX, _lastY);
            await _context.LineToAsync(e.OffsetX, e.OffsetY);
            await _context.StrokeAsync();
            await _context.ClosePathAsync();

            _lastX = e.OffsetX;
            _lastY = e.OffsetY;
        }
        else if (_isDrawing && _drawingRectangle)
        {

            await _context2.SetLineWidthAsync((float)BrushThickness);
            await _context2.SetLineCapAsync(LineCap.Round);
            await _context2.BeginPathAsync();
            double x = _lastX;
            double y = _lastY;
            double width = e.OffsetX - _lastX;
            double height = e.OffsetY - _lastY;

            await _context2.BeginPathAsync();
            await _context2.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);
            await _context2.SetFillStyleAsync(BrushColor);
            await _context2.FillRectAsync(x, y, width, height);
            await _context2.ClosePathAsync();
        }
    }
    private async Task ChangeColor(string color)
    {
        BrushColor = color;
        await _context.SetStrokeStyleAsync(color);
    }
    private async Task ChangeColorPicker(ChangeEventArgs e)
    {
        var color = e.Value.ToString();
        BrushColor = color;
        await _context.SetStrokeStyleAsync(color);
    }
    private async Task ChangeThickness(int thickness)
    {
        BrushThickness = thickness;
        //Okey I am an idiot, I set onclick event to div instead of button
    }
    private async Task EraseModeChanged(ChangeEventArgs e)
    {
        if((bool)e.Value)
        {
            await _context.SetStrokeStyleAsync("#ffffff");
        }
        else
        {
            await _context.SetStrokeStyleAsync(BrushColor);
        }
    }
    private async Task ClearCanvas()
    {
        await _context.ClearRectAsync(0, 0, _canvasWidth, _canvasHeight);
        await _context.SetFillStyleAsync("#ffffff");
        await _context.FillRectAsync(0, 0, _canvasWidth, _canvasHeight);
        await _context.SetStrokeStyleAsync(BrushColor);
    }
    public async Task SaveCanvasAsPng()
    {
        await JS.InvokeVoidAsync("downloadCanvasByRef", _canvasReference.CanvasReference, "mydrawing.png");
    }
    public async Task DrawingRectangle()
    {
        if (!_drawingRectangle)
        {
            _drawingRectangle = true;
            await JS.InvokeVoidAsync("StartDrawingRectangle");
        }
        else
        {
            _drawingRectangle = false;
            await JS.InvokeVoidAsync("StopDrawingRectangle");
        }
    }
}
